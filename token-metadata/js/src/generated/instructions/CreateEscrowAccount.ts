/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
import {
  CreateEscrowAccountArgs,
  createEscrowAccountArgsBeet,
} from '../types/CreateEscrowAccountArgs';

/**
 * @category Instructions
 * @category CreateEscrowAccount
 * @category generated
 */
export type CreateEscrowAccountInstructionArgs = {
  createEscrowAccountArgs: CreateEscrowAccountArgs;
};
/**
 * @category Instructions
 * @category CreateEscrowAccount
 * @category generated
 */
export const CreateEscrowAccountStruct = new beet.FixableBeetArgsStruct<
  CreateEscrowAccountInstructionArgs & {
    instructionDiscriminator: number;
  }
>(
  [
    ['instructionDiscriminator', beet.u8],
    ['createEscrowAccountArgs', createEscrowAccountArgsBeet],
  ],
  'CreateEscrowAccountInstructionArgs',
);
/**
 * Accounts required by the _CreateEscrowAccount_ instruction
 *
 * @property [_writable_] escrow Escrow account
 * @property [] metadata Metadata account
 * @property [] mint Mint account
 * @property [] edition Edition account
 * @property [_writable_, **signer**] payer Wallet paying for the transaction and new account
 * @category Instructions
 * @category CreateEscrowAccount
 * @category generated
 */
export type CreateEscrowAccountInstructionAccounts = {
  escrow: web3.PublicKey;
  metadata: web3.PublicKey;
  mint: web3.PublicKey;
  edition: web3.PublicKey;
  payer: web3.PublicKey;
  systemProgram?: web3.PublicKey;
  rent?: web3.PublicKey;
};

export const createEscrowAccountInstructionDiscriminator = 37;

/**
 * Creates a _CreateEscrowAccount_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category CreateEscrowAccount
 * @category generated
 */
export function createCreateEscrowAccountInstruction(
  accounts: CreateEscrowAccountInstructionAccounts,
  args: CreateEscrowAccountInstructionArgs,
  programId = new web3.PublicKey('metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'),
) {
  const [data] = CreateEscrowAccountStruct.serialize({
    instructionDiscriminator: createEscrowAccountInstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.escrow,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.metadata,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.mint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.edition,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
  ];

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  });
  return ix;
}
