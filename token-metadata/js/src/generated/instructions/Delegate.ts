/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
import { DelegateArgs, delegateArgsBeet } from '../types/DelegateArgs';

/**
 * @category Instructions
 * @category Delegate
 * @category generated
 */
export type DelegateInstructionArgs = {
  delegateArgs: DelegateArgs;
};
/**
 * @category Instructions
 * @category Delegate
 * @category generated
 */
export const DelegateStruct = new beet.FixableBeetArgsStruct<
  DelegateInstructionArgs & {
    instructionDiscriminator: number;
  }
>(
  [
    ['instructionDiscriminator', beet.u8],
    ['delegateArgs', delegateArgsBeet],
  ],
  'DelegateInstructionArgs',
);
/**
 * Accounts required by the _Delegate_ instruction
 *
 * @property [_writable_] delegate Delegate account key (pda of [mint id, delegate role, user id, authority id])
 * @property [] delegateOwner Owner of the delegated account
 * @property [] mint Mint of metadata
 * @property [_writable_] metadata Metadata account
 * @property [_writable_] masterEdition (optional) Master Edition account
 * @property [**signer**] authority Authority to approve the delegation
 * @property [_writable_, **signer**] payer Payer
 * @property [] sysvarInstructions Instructions sysvar account
 * @property [] splTokenProgram (optional) SPL Token Program
 * @property [_writable_] tokenAccount (optional) Owned Token Account of mint
 * @property [] authorizationRules (optional) Token Authorization Rules account
 * @property [] authorizationRulesProgram (optional) Token Authorization Rules Program
 * @category Instructions
 * @category Delegate
 * @category generated
 */
export type DelegateInstructionAccounts = {
  delegate: web3.PublicKey;
  delegateOwner: web3.PublicKey;
  mint: web3.PublicKey;
  metadata: web3.PublicKey;
  masterEdition?: web3.PublicKey;
  authority: web3.PublicKey;
  payer: web3.PublicKey;
  systemProgram?: web3.PublicKey;
  sysvarInstructions: web3.PublicKey;
  splTokenProgram?: web3.PublicKey;
  tokenAccount?: web3.PublicKey;
  authorizationRules?: web3.PublicKey;
  authorizationRulesProgram?: web3.PublicKey;
};

export const delegateInstructionDiscriminator = 48;

/**
 * Creates a _Delegate_ instruction.
 *
 * Optional accounts that are not provided will be omitted from the accounts
 * array passed with the instruction.
 * An optional account that is set cannot follow an optional account that is unset.
 * Otherwise an Error is raised.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category Delegate
 * @category generated
 */
export function createDelegateInstruction(
  accounts: DelegateInstructionAccounts,
  args: DelegateInstructionArgs,
  programId = new web3.PublicKey('metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'),
) {
  const [data] = DelegateStruct.serialize({
    instructionDiscriminator: delegateInstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.delegate,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.delegateOwner,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.mint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.metadata,
      isWritable: true,
      isSigner: false,
    },
  ];

  if (accounts.masterEdition != null) {
    keys.push({
      pubkey: accounts.masterEdition,
      isWritable: true,
      isSigner: false,
    });
  }
  keys.push({
    pubkey: accounts.authority,
    isWritable: false,
    isSigner: true,
  });
  keys.push({
    pubkey: accounts.payer,
    isWritable: true,
    isSigner: true,
  });
  keys.push({
    pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
    isWritable: false,
    isSigner: false,
  });
  keys.push({
    pubkey: accounts.sysvarInstructions,
    isWritable: false,
    isSigner: false,
  });
  if (accounts.splTokenProgram != null) {
    if (accounts.masterEdition == null) {
      throw new Error(
        "When providing 'splTokenProgram' then 'accounts.masterEdition' need(s) to be provided as well.",
      );
    }
    keys.push({
      pubkey: accounts.splTokenProgram,
      isWritable: false,
      isSigner: false,
    });
  }
  if (accounts.tokenAccount != null) {
    if (accounts.masterEdition == null || accounts.splTokenProgram == null) {
      throw new Error(
        "When providing 'tokenAccount' then 'accounts.masterEdition', 'accounts.splTokenProgram' need(s) to be provided as well.",
      );
    }
    keys.push({
      pubkey: accounts.tokenAccount,
      isWritable: true,
      isSigner: false,
    });
  }
  if (accounts.authorizationRules != null) {
    if (
      accounts.masterEdition == null ||
      accounts.splTokenProgram == null ||
      accounts.tokenAccount == null
    ) {
      throw new Error(
        "When providing 'authorizationRules' then 'accounts.masterEdition', 'accounts.splTokenProgram', 'accounts.tokenAccount' need(s) to be provided as well.",
      );
    }
    keys.push({
      pubkey: accounts.authorizationRules,
      isWritable: false,
      isSigner: false,
    });
  }
  if (accounts.authorizationRulesProgram != null) {
    if (
      accounts.masterEdition == null ||
      accounts.splTokenProgram == null ||
      accounts.tokenAccount == null ||
      accounts.authorizationRules == null
    ) {
      throw new Error(
        "When providing 'authorizationRulesProgram' then 'accounts.masterEdition', 'accounts.splTokenProgram', 'accounts.tokenAccount', 'accounts.authorizationRules' need(s) to be provided as well.",
      );
    }
    keys.push({
      pubkey: accounts.authorizationRulesProgram,
      isWritable: false,
      isSigner: false,
    });
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  });
  return ix;
}
