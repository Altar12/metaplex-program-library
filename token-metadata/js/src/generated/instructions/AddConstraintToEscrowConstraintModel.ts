/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
import {
  AddConstraintToEscrowConstraintModelArgs,
  addConstraintToEscrowConstraintModelArgsBeet,
} from '../types/AddConstraintToEscrowConstraintModelArgs';

/**
 * @category Instructions
 * @category AddConstraintToEscrowConstraintModel
 * @category generated
 */
export type AddConstraintToEscrowConstraintModelInstructionArgs = {
  addConstraintToEscrowConstraintModelArgs: AddConstraintToEscrowConstraintModelArgs;
};
/**
 * @category Instructions
 * @category AddConstraintToEscrowConstraintModel
 * @category generated
 */
export const AddConstraintToEscrowConstraintModelStruct = new beet.FixableBeetArgsStruct<
  AddConstraintToEscrowConstraintModelInstructionArgs & {
    instructionDiscriminator: number;
  }
>(
  [
    ['instructionDiscriminator', beet.u8],
    ['addConstraintToEscrowConstraintModelArgs', addConstraintToEscrowConstraintModelArgsBeet],
  ],
  'AddConstraintToEscrowConstraintModelInstructionArgs',
);
/**
 * Accounts required by the _AddConstraintToEscrowConstraintModel_ instruction
 *
 * @property [_writable_] escrowConstraintModel Constraint model account
 * @property [_writable_, **signer**] payer Wallet paying for the transaction and new account, will be set as the creator of the constraint model
 * @property [**signer**] updateAuthority Update authority of the constraint model
 * @category Instructions
 * @category AddConstraintToEscrowConstraintModel
 * @category generated
 */
export type AddConstraintToEscrowConstraintModelInstructionAccounts = {
  escrowConstraintModel: web3.PublicKey;
  payer: web3.PublicKey;
  updateAuthority: web3.PublicKey;
  systemProgram?: web3.PublicKey;
};

export const addConstraintToEscrowConstraintModelInstructionDiscriminator = 42;

/**
 * Creates a _AddConstraintToEscrowConstraintModel_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category AddConstraintToEscrowConstraintModel
 * @category generated
 */
export function createAddConstraintToEscrowConstraintModelInstruction(
  accounts: AddConstraintToEscrowConstraintModelInstructionAccounts,
  args: AddConstraintToEscrowConstraintModelInstructionArgs,
  programId = new web3.PublicKey('metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'),
) {
  const [data] = AddConstraintToEscrowConstraintModelStruct.serialize({
    instructionDiscriminator: addConstraintToEscrowConstraintModelInstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.escrowConstraintModel,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.updateAuthority,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ];

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  });
  return ix;
}
