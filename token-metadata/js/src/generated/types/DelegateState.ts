/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js';
import * as beet from '@metaplex-foundation/beet';
import * as beetSolana from '@metaplex-foundation/beet-solana';
/**
 * This type is used to derive the {@link DelegateState} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link DelegateState} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type DelegateStateRecord = {
  Sale: { fields: [web3.PublicKey] };
};

/**
 * Union type respresenting the DelegateState data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isDelegateState*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type DelegateState = beet.DataEnumKeyAsKind<DelegateStateRecord>;

export const isDelegateStateSale = (x: DelegateState): x is DelegateState & { __kind: 'Sale' } =>
  x.__kind === 'Sale';

/**
 * @category userTypes
 * @category generated
 */
export const delegateStateBeet = beet.dataEnum<DelegateStateRecord>([
  [
    'Sale',
    new beet.BeetArgsStruct<DelegateStateRecord['Sale']>(
      [['fields', beet.fixedSizeTuple([beetSolana.publicKey])]],
      'DelegateStateRecord["Sale"]',
    ),
  ],
]) as beet.FixableBeet<DelegateState>;
